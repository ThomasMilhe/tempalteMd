{
  
    
        "post0": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://thomasmilhe.github.io/tempalteMd/markdown/2021/10/11/test.html",
            "relUrl": "/markdown/2021/10/11/test.html",
            "date": " • Oct 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Comment expliquer le fait qu&#39;un jeu soit un véritable succès ?? . L&#39;Objectif de notre Projet . Du point de vue du projet, notre objectif est de réaliser un dashboard complet et fonctionnel qui permet aux utilisateurs de découvrir des statistiques sur notre dataset. En remplissant un formulaire l&#39;utilisateur doit pouvoir découvrir des statistiques enrichissantes sur les éléments qu&#39;il a saisi. . D&#39;un point de vue personnel, le but de l&#39;ensemble des collaborateurs était de : . Progresser dans les différents outils utilisés(JS,Python,Flask) | Travailler efficacement en équipe (Git, etc ...) | Réaliser un projet de bonne qualité, que l&#39;on pourrait mettre en avant par la suite. | . Un début chaotique : le choix du dataSet . Une des principales difficultées que nous avons rencontré durant ce projet a été le choix du dataset, ce choix nous a été compliqué pour différentes raisons: . La première raison de cette difficulté a été la volonté de travailler sur des données qui nous tiennent à cœur . Des données de santé ou encore météorologiques étaient assez facilement accessibles, mais ne nous intéressaient pas. | La deuxième difficulté rencontrée a été le manque d&#39;informations et de variables dans le jeu de données. Dans le but de faire un dashboard, avoir des données diverses et exploitables est quelque chose de nécessaire. | D&#39;autres difficultés, comme par exemple le format des données nous a fait perdre du temps également. | . Etant tous les 3 fans de jeux vidéos, nous avons donc décider de nous orienter vers une dataset qui recense les ventes de jeux vidéos assez complÃ¨te pour Ãªtre exploitable. . Elaboration de notre problématique : . La problématique qui nous intéresse dans notre cas est de savoir: &quot;Comment expliquer les ventes des jeux vidéos selon des critères diverses ? . Schématisation de notre site . Nous avons décider de créer un formulaire qui permet de trier sur: . les différents genres de jeux vidéos (via un select) . | les différentes plateformes de jeux vidéos (via un select) . | les différents éditeurs de jeux vidéos (via un select) . | l&#39;année de sortie de ces jeux vidéos (via un slider double) . | . Afin de pouvoir répondre à notre problématique, les graphes qui nous semblent judicieux sont , selon les filtres ci-dessus: . Un diagramme circulaire expliquant la répartition des ventes selon les régions. (Popularité des plateformes/genres selon les régions) . | Un diagramme en barre représentant les 5 editeurs qui ont le plus vendus. (Popularité des Editeurs) . | Un diagramme en barre représentant les plateformes qui ont le plus de critiques sur internet(Popularité globale des plateformes ) . | Un diagramme temporel qui indique les ventes selon les années de sortie (Popularité des plateformes et Genre dans le temps) . | . Mock réalisé avant la conception du site . . ** . Nettoyage des données: . Nous avons, pour le nettoyage des données, décider de: . Supprimer les lignes qui n&#39;avaient pas de Dates valides (Nan) | Supprimer les lignes qui ont ont des valeurs nulles pour les notes des critiques /utilisateurs uniquement au moment de la récupération des données pour notre graphe répertoriant le nombre de critiques. | . Architecture du logiciel: . . Répartition des classes: . Dans static/js: . dashboard.js (classe qui recoit la réponse des fonctions de api.js et qui grÃ¢ce Ã ces informations appelle les classes de création de graphes dans graph.js) . | form.js (classe qui appelle les fonctions d&#39;update des graphs aprÃ¨s la validation du formulaire) . | utils: . api.js (classe js qui contient les requÃªtes post vers le serveur python) | graphs.js (classe js qui contient les fonctions responsables des créations de graphes) | . | element: . slider.js (classe JavaScript qui decrit le fonctionnement du slider) . element: . | . | . | Dans templates: . base.html et index.html qui sont les fichiers html de base . | partials: . dashboard.html (fichier html qui contient le code html des graphes) . | footer.html (fichier html qui contient le code html du footer) . | head.html (fichier html qui contient le code html du header et des scripts) . | form: . form_jv.html (fichier html qui contient le code html du formulaire) | . | . | . | . Exemple d&#39;update du graphe circulaire: . 1)Validation du formulaire . 2) Récupération dans form.js . {form.js} var message = new FormData() message.append(&quot;genre&quot;, document.getElementById(&quot;genre&quot;).value); message.append(&#39;platform&#39;, document.getElementById(&quot;platform&quot;).value); message.append(&#39;minYear&#39;, document.getElementById(&quot;minYear&quot;).value); message.append(&#39;maxYear&#39;, document.getElementById(&quot;maxYear&quot;).value); updatePublisherGraph(publisherGraph,message) updateSalesGraph(salesGraph,message) e.preventDefault() . 3) Modification du graphe dans dashboard.js . {dashboard.js} export async function updateSalesGraph(chart,message) { let sales = await getSales(message); if (sales !== null) { let labels = [] let sales_sum = [] for (const [key, value] of Object.entries(sales)) { labels.push(key) sales_sum.push(value) } chart.data.datasets[0].data = sales_sum; chart.data.labels = labels; chart.update(); } } . 4) Récupération des datas en getSales . {api.js} export async function getSales(message) { let res try { await axios.post(&#39;/api/get/sales&#39;, message) .then(function (response) { res=response.data }) .catch(function (error) { console.log(error); }); } catch (error) { console.error(error); return null } return res } . Réponse à notre problématique . Il est difficile de valider des réponses avec ce jeu de données et le peu de temps que l&#39;on a eu, mais il est possible d&#39;y extraire quelques informations: . On remarque notamment que certaines plateformes ont un succès bien plus élevé dans certaines régions. Nintendo vend, en proportion, bien plus au Japon que la plupart des autres éditeurs. Il serait donc conseillé pour Nintendo de ne pas négliger le marché Japonais et de le prendre en compte sérieusement.On peut le voir avec les ventes de la gameboy(a gauche) par rapport aux ventes de l&#39;ensembles des plateformes (à droite) | . . On peut également apercevoir que les ventes des jeux ont augmenté Ã certains moments (pics dans le graphe). Ces moments (2006 /2008) semblent correspondre aux sorties des grosses consoles .Logiquement les ventes des jeux sont bien plus élevés lors des sorties des grosses consoles. On peut voir également une baisse dans les dernières années. Cela s&#39;explique par le fait qu&#39;il y ait eu moins de temps pour acheter les jeux, il est donc nécessaire de laisser du temps aux jeux , car leurs ventes peuvent Ãªtre dans la durée . . | On peut également apercevoir que les consoles qui ont le plus de succès (PC,PS3,PS4) sont celles qui ont le plus de critiques sur le web. Les plateformes qui réussisent Ã avoir une communauté active sont celles qui vendent le plus.Pour les nouveaux éditeurs et concepteurs de plateformes , il est donc important de faire des jeux de qualité et d&#39;avoir une communauté active. . . | . Difficultés rencontrées . Nous avons été confronté Ã plusieurs problèmes: . Le premier problème a été de gérer les méthodes asynchrones afin de pouvoir visualiser toutes les données directement. | Le jeu de données a également posé problÃ¨me, car nous avons découvert au fur et à mesure des données aberrantes (Jeu Ds en 1985 ?), il y avait également beaucoup de données manquantes. Le nombre de lignes (16000), était très important également. . | Le nombre important de lignes a fait que générer un tableau pour rechercher des données était beaucoup trop long à charger . On a donc du créer une pagination coté serveur affin de pouvoir observer les données depuis le Dashboard à travers un tableau classé par nombre de ventes global . Nous avons eu beaucoup de problèmes de format de données et d’initialisation du tableau. . | Nous avons tenté d&#39;automatiser la création de l&#39;ensemble des graphes au sein d&#39;une méthode. Néamoins les petites différences entre l&#39;ensemble des graphes ont donné un rendu moins propre que celui souhaité. | . Ressenti sur le projet . De notre cÃ´té , nous avons beaucoup apprécié travailler sur ce projet, et de découvrir des nouvelles technologies. Le travail d&#39;équipe s&#39;est également trÃ¨s bien déroulé. . Cependant, nous avons trouvé que le temps prévu pour ce projet était un peu insuffisant afin de raliser un projet de meilleure qualité. .",
            "url": "https://thomasmilhe.github.io/tempalteMd/markdown/2021/06/18/test-utf8.html",
            "relUrl": "/markdown/2021/06/18/test-utf8.html",
            "date": " • Jun 18, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://thomasmilhe.github.io/tempalteMd/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://thomasmilhe.github.io/tempalteMd/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "An Example Markdown Post",
          "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
          "url": "https://thomasmilhe.github.io/tempalteMd/2021-10-10-test.html",
          "relUrl": "/2021-10-10-test.html",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://thomasmilhe.github.io/tempalteMd/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://thomasmilhe.github.io/tempalteMd/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}